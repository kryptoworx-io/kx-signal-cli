package io.kryptoworx.signalcli.storage;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class SQLInsert {

    private static record Column<T>(String name, T value, SQLParameterSetter<T> parameterSetter) {

    }

    private final String table;
    private final List<Column<?>> columns = new ArrayList<>();

    public static SQLInsert forTable(String table) {
        return new SQLInsert(table);
    }

    private SQLInsert(String table) {
        this.table = table;
    }

    public <T> SQLInsert add(String column, T value, SQLParameterSetter<T> parameterSetter) {
        columns.add(new Column<T>(column, value, parameterSetter));
        return this;
    }

    public void execute(Connection connection) throws SQLException {
        execute(connection, null);
    }

    public <T> T execute(Connection connection, ResultSetReader<T> keyReader) throws SQLException {
        StringBuilder sqlBuilder = new StringBuilder("INSERT INTO ")
                .append(table)
                .append("(")
                .append(columns.stream().map(Column::name).collect(Collectors.joining(", ")))
                .append(") VALUES (")
                .append(IntStream.range(0, columns.size()).mapToObj(i -> "?").collect(Collectors.joining(", ")))
                .append(")");
        int autoGeneratedKeys = keyReader == null ? Statement.NO_GENERATED_KEYS : Statement.RETURN_GENERATED_KEYS;
        try (PreparedStatement stmt = connection.prepareStatement(sqlBuilder.toString(), autoGeneratedKeys)) {
            int p = 1;
            for (Column c : columns) {
                c.parameterSetter.setValue(stmt, p++, c.value());
            }
            stmt.executeUpdate();
            if (keyReader != null) {
                try (ResultSet keys = stmt.getGeneratedKeys()) {
                    keys.next();
                    return keyReader.read(keys);
                }
            }
        }
        return null;
    }
}
